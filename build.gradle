group "com.ccloomi"
version '1.0'
def artifactId='fileServer'

apply plugin: 'java'
apply plugin: 'maven'

def mvnLocal  ='http://localhost:8081/repository/maven-central/'
def mvnRelease='http://localhost:8081/repository/maven-releases/'
allprojects {
	repositories {
		//maven{url='https://maven.aliyun.com/nexus/content/groups/public/'}
		maven{url="$mvnLocal"}
		maven{url="$mvnRelease"}
		//mavenCentral()
	}
}
dependencies {
        def jacksonVersion		= "2.9.8"
		def logbackVersion		= "1.2.3"
		def slf4jVersion		= "1.7.26"
		def springBootVersion	= "2.+"
    compile (
		["ch.qos.logback:logback-access:$logbackVersion"],
		["ch.qos.logback:logback-classic:$logbackVersion"],
		["ch.qos.logback:logback-core:$logbackVersion"],
		["org.slf4j:log4j-over-slf4j:$slf4jVersion"],
		["org.slf4j:slf4j-api:$slf4jVersion"],
		["org.rocksdb:rocksdbjni:5.17.2"],
		["org.springframework.boot:spring-boot-starter-web:$springBootVersion"],
		["org.xerial.snappy:snappy-java:1.1.7.2"],
		["com.fasterxml.jackson.core:jackson-core:$jacksonVersion"],
		["com.fasterxml.jackson.core:jackson-databind:$jacksonVersion"],
		["com.fasterxml.jackson.core:jackson-annotations:$jacksonVersion"],
		["io.netty:netty-all:4.1.9.Final"],
    		fileTree(dir: 'libs', include: '*.jar'))
    testCompile(["junit:junit:4.+"])
}
//打包源代码
task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}
artifacts {
    archives sourcesJar
}
tasks.withType(JavaCompile) {  
	options.encoding = "UTF-8"  
}
uploadArchives {
    repositories {
        mavenDeployer {
            repository(url: "$mvnRelease") {
                authentication(userName: "admin", password: "admin123")
            }
            pom.version = "$project.version"
            pom.artifactId = "$artifactId"
            pom.groupId = "$project.group"
        }
    }
}
jar {
    String classPath = ''
    configurations.runtime.each {classPath += " lib//"+it.name}
    manifest {
        attributes 'Main-Class': 'com.fileup.WebSocketServer'
        attributes 'Class-Path': classPath
    }
}
task rj{
	dependsOn build
	copy{
		from configurations.runtime
		into 'build/dist/lib'
	}
	copy {
		from 'build/libs/'
		into 'build/dist/'
	}
	copy {
		from 'config'
		into 'build/dist/config'
	}
	copy{
		from 'public'
		into 'build/dist/public'
		include '**/bst.min.js'
		include '**/CCFileUp.min.js'
		include '**/jquery.slim.min.js'
		include '**/md5Worker.min.js'
		include 'index.html'
	}
}